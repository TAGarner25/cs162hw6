void SongList::loadSongs(const char fileName[])
{
     ifstream inFile;
     Song *aSong;             
     char temp[MAX_CHAR];	 
     char *title = nullptr;
     char *artist = nullptr;  
     float *duration = nullptr;
     char *album = nullptr;    
     // open file
     inFile.open(fileName);
     
     // error msg if not open
     if (!inFile)
     {
          cerr << "The file does not exist...";
          exit(1);
     }

     // get len for 1st item
    inFile.get(temp, MAX_CHAR, ';');
	int lenTitle = strlen(temp) + 1;
	title = new char[lenTitle];
	inFile.get(title, MAX_CHAR, ';');
	if (title == nullptr)
	{
		cerr << "Error, title = nullptr...";
		exit(1);
	}
    // read info until end of file
    while (!inFile.eof())
    {
        inFile.get();  // discard ';'
		temp = "";
		inFile.get(temp, MAX_CHAR, ';');
		int lenArtist = strlen(temp) + 1;
		artist = new char[lenArtist];
        inFile.get(artist, MAX_CHAR, ';');
        if (artist == nullptr)
		{
		cerr << "Error, title = nullptr...";
		exit(1);
		}
		inFile.get();
	  duration = new duration;  
        inFile >> duration;
        if (duration == nullptr)
		{
			cerr << "Error, duration = nullptr...";
			exit(1);
		}
        inFile.get();  
		temp = "";
		inFile.get(temp, MAX_CHAR, ';');
		int lenAlbum = strlen(temp) + 1;
		album = new char[lenAlbum];
        inFile.get(album, MAX_CHAR, '\n');
        if (album == nullptr)
		{
			cerr << "Error, album = nullptr...";
			exit(1);
		}
		inFile.ignore(MAX_CHAR, '\n');    
        // set info to thisSong obj
		// delete unused memory
		// set ptr to nullptr to reuse
        aSong->setTitle(title);
		delete title[];
		title = nullptr;
        aSong->setArtist(artist);
		delete artist[];
		artist = nullptr;
        aSong->setDuration(duration);
		delete duration;
		duration = nullptr;
        aSong->setAlbum(album);
		delete album[];
		album = nullptr;
        // add thisSong to list
        addSongs(aSong);
		// repeat
		temp = "";
		infile.get(temp, MAX_CHAR, ';');
		int lenTitle = strlen(temp) + 1;
		title = new char[lenTitle];
        inFile.get(title, MAX_CHAR, ';');
    }
    // close inFile
    inFile.close();
}

/*
     function to save song list to file
     recieves file name on call
*/
void SongList::saveSongs(const char fileName[]) const
{
     ofstream outFile;
     char title[MAX_CHAR];
     char artist[MAX_CHAR];
     float duration;
     char album[MAX_CHAR];

     // open save file
     outFile.open(fileName);
     
     // error msg if cannot open file
     if (!outFile)
     {
          cerr << "Save location not found..." << endl;
		exit(1);
     }

     // loop through Song list and get info, then print to file
     for (auto idx = 0; idx < size; idx++)
     {
          // get info for Song obj
          list[idx].getTitle(title);
          list[idx].getArtist(artist);
          duration = list[idx].getDuration();
          list[idx].getAlbum(album);
         
          // write to file
          outFile   << title << ';'
                    << artist << ';'
                    << duration << ';'
                    << album << endl;
     }
 
     // close outfile
     outFile.close();
}


