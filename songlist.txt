// Trevor Garner
// CS 162 HW5
// Function definitions for SongList class

#include "songlist.h"
#include <fstream>

/*
     TODO: None
*/

               /*   CONSTRUCTORS & DECONSTRUCTOR  */

// default constructor
SongList::SongList()
{
     // declare number of songs
     // default is 0 if no songs in list
     size = 0;
}

// destructor
SongList::~SongList() {}

/******************          FUNCTIONS          ******************************/

                    /*   PROGRAM FUNCTIONS   */

/*
     function to load song collection from file
     recieves fileName on call
     creates Song obj called 'thisSong' and adds to Song list
*/
void SongList::loadSongs(const char fileName[])
{
     ifstream inFile;         // ifstream operator
     Song *aSong;              // Song object
     char temp[MAX_CHAR];	// used to get len of str   
	 char *title = nullptr;// read in title
     char *artist = nullptr;   // read in artist
     float *duration = nullptr;          // read in duration
     char *album = nullptr;    // read in album
    
     // open file
     inFile.open(fileName);
     
     // error msg if not open
     if (!inFile)
     {
          cerr << "The file does not exist...";
          exit(1);
     }

     // get len for 1st item
    inFile.get(temp, MAX_CHAR, ';');
	int lenTitle = strlen(temp) + 1;
	title = new char[lenTitle];
	inFile.get(title, MAX_CHAR, ';');
	if (title == nullptr)
	{
		cerr << "Error, title = nullptr...";
		exit(1);
	}
    // read info until end of file
    while (!inFile.eof())
    {
        inFile.get();  // discard ';'
		temp = "";
		inFile.get(temp, MAX_CHAR, ';');
		int lenArtist = strlen(temp) + 1;
		artist = new char[lenArtist];
        inFile.get(artist, MAX_CHAR, ';');
        if (artist == nullptr)
		{
		cerr << "Error, title = nullptr...";
		exit(1);
		}
		inFile.get();  // discard ';'
        inFile >> duration;
        if (duration == nullptr)
		{
			cerr << "Error, duration = nullptr...";
			exit(1);
		}
        inFile.get();  // discard ';'
		temp = "";
		inFile.get(temp, MAX_CHAR, ';');
		int lenAlbum = strlen(temp) + 1;
		album = new char[lenAlbum];
        inFile.get(album, MAX_CHAR, '\n');
        if (album == nullptr)
		{
			cerr << "Error, album = nullptr...";
			exit(1);
		}
		inFile.ignore(MAX_CHAR, '\n');     // discard new line

        // set info to thisSong obj
		// delete unused memory
		// set ptr to nullptr to reuse
        aSong->setTitle(title);
		delete title[];
		title = nullptr;
        aSong->setArtist(artist);
		delete artist[];
		artist = nullptr;
        aSong->setDuration(duration);
		delete duration;
		duration = nullptr;
        aSong->setAlbum(album);
		delete album[];
		album = nullptr;
         
        // add thisSong to list
        addSongs(aSong);

		// repeat
		temp = "";
		infile.get(temp, MAX_CHAR, ';');
		int lenTitle = strlen(temp) + 1;
		title = new char[lenTitle];
        inFile.get(title, MAX_CHAR, ';');
    }

    // close inFile
    inFile.close();
}

/*
     function to save song list to file
     recieves file name on call
*/
void SongList::saveSongs(const char fileName[]) const
{
     ofstream outFile;
     char title[MAX_CHAR];
     char artist[MAX_CHAR];
     float duration;
     char album[MAX_CHAR];

     // open save file
     outFile.open(fileName);
     
     // error msg if cannot open file
     if (!outFile)
     {
          cerr << "Save location not found..." << endl;
		exit(1);
     }

     // loop through Song list and get info, then print to file
     for (auto idx = 0; idx < size; idx++)
     {
          // get info for Song obj
          list[idx].getTitle(title);
          list[idx].getArtist(artist);
          duration = list[idx].getDuration();
          list[idx].getAlbum(album);
         
          // write to file
          outFile   << title << ';'
                    << artist << ';'
                    << duration << ';'
                    << album << endl;
     }
 
     // close outfile
     outFile.close();
}

                    /*   USER INTERFACE FUNCTIONS */

/*
     function to add song to song list
     parameters
          Song newSong -> the newSong object the user has provided
*/
bool SongList::addSongs(const Song& newSong)
{     
     bool found, title, artist;
     char newTitle[MAX_CHAR];
     char newArtist[MAX_CHAR];
     char existingTitle[MAX_CHAR];
     char existingArtist[MAX_CHAR];
      
     // get newSong's information
     newSong.getTitle(newTitle);
     newSong.getArtist(newArtist);
     

     for (int idx = 0; idx < size; idx++)
     {    
		title = false;		// start @ false for each loop
		artist = false;
		// get existing information
          list[idx].getTitle(existingTitle);
          list[idx].getArtist(existingArtist);
          // compare list title to newTitle
          if (strcmp(existingTitle, newTitle) == 0)
          {
               title = true;
          }
          // compare this obj's artist to newArtist
          if (strcmp(existingArtist, newArtist) == 0)
          {
               artist = true;
          }
          // if both true, then song already exists in list
          if ((title == true) && (artist == true))
          {
               found = true;
          }
          else
          {
               found = false;
          }
     }
     
     if (found == false) // if not already in list
     {
          list[size] = newSong;    // add newSong to list
          size++;
          return true;
     }
     else
     {
          return false;	// item already exists, do not add to list
     }
}         

/*
     function to remove song
     parameter
          index position of song to remove (provided by user)
*/
void SongList::removeSongs(int removeIdx)
{
     // loop through list and remove desired song
     for (int idx = removeIdx; idx < size; idx++)
     {
          list[idx] = list[idx + 1];     // delete song
     }
     
     size--;   // decrease size by 1
}

/*
     function to print all songs in list
*/
void SongList::printSongs() const
{
     // loop through list and have obj print contents
     for (auto idx = 0; idx < size; idx++)
     {
          int pos = idx;			// song index
          list[idx].print(pos);	// print song
     }
}

/*
     function to search list of songs
     parameters
          const char name[] -> the search string provided by user
		int searchby -> the type of search user wants (1 = artist, 2 = album)
*/
void SongList::searchSongs(const char name[], int searchBy) const
{
     bool found = false;						// flag to determine if item was found
     
     char listArtist[MAX_CHAR];                  	// search item from list
     char listAlbum[MAX_CHAR];                   	// search item from list 

     int index;							// used to print index position of song in list
     

     switch (searchBy)
     {
          case 1:   // artist
			// loop through list and compare name to artist
               for (int idx = 0; idx < size; idx++)
               {
                    list[idx].getArtist(listArtist);
                    index = idx;

                    if (strcmp(listArtist, name) == 0)     // compare list artist to search name
                    {	// if are same print results
                         found = true;
                         list[idx].print(index);
                    }
			}
               if (found == false) // if not found, display err msg
               {
                    cout << "Sorry, can't find what you're looking for..." << endl;
                    cout << "Maybe try another search." << endl;
				break;
               }
          case 2:   // album
			// loop through list and compare name to album
               for (int idx = 0; idx < size; idx++)
               {
                    list[idx].getAlbum(listAlbum);
                    index = idx;
                    if (strcmp(listAlbum, name) == 0)      // compare list album to search name
                    {	// if are the same, print results
                         found = true;
                         list[idx].print(index);
                    }
			}
               if (found == false) // if not found, display err msg
               {
                    cout << "Sorry, can't find what you're looking for..." << endl;
                    cout << "Maybe try another search." << endl;
				break;
               }
     }//end switch
}
